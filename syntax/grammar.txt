InitiateSt -> int main ( ) { statement
statement -> SimpleSt
statement -> CompoundSt
statement -> ConditionSt
statement -> LoopSt
statement -> CtrlSt
statement -> Decl
semicolon -> ; SecondarySt
SecondarySt -> statement
SecondarySt -> Scope
Scope -> } Scope2
Scope2 -> statement
Scope2 -> }
Scope2 -> @
SimpleSt -> ID SimpleSt2
SimpleSt2 -> SpecOps ExpressSt semicolon
SimpleSt2 -> ++ semicolon
SimpleSt2 -> -- semicolon
SpecOps -> =
SpecOps -> +=
SpecOps -> -=
SpecOps -> *=
SpecOps -> /=
Ops -> +
Ops -> -
Ops -> *
Ops -> /
Ops -> %
ExpressSt -> Number Exp
ExpressSt -> String Exp
ExpressSt -> ID Exp
Exp -> @
Exp -> Ops ExpressSt
Decl -> type ID Decl2
Decl2 -> semicolon
Decl2 -> = ExpressSt semicolon
type -> int
type -> float
type -> char
type -> double
CompoundSt -> { statement
ConditionSt -> if ( ConditionSt2 ) statement
ConditionSt2 -> ExpressSt ConditionSt3
ConditionSt3 -> CompOps ExpressSt
ConditionSt3 -> @
CompOps -> ==
CompOps -> >=
CompOps -> <=
CompOps -> !=
CompOps -> >
CompOps -> <
LoopSt -> while ( ConditionSt2 ) statement
LoopSt -> for ( LoopInit ; ConditionSt2 ; ForSt ) statement
LoopInit -> type ID = ExpressSt
LoopInit -> ID
ForSt -> ID steps
steps -> ++
steps -> --
steps -> SpecOps var
var -> ID
var -> Number
CtrlSt -> break semicolon
CtrlSt -> continue semicolon
CtrlSt ->  return ExpressSt semicolon
