mainStatement -> int main ( ) { statement 
statement -> labeled-statement
statement -> compound-statement
statement -> selection-statement
statement -> iteration-statement
statement -> jump-statement
statement -> initialize-statement
semicolon -> ; semicolon-temp
semicolon-temp -> statement 
semicolon-temp -> brace
brace -> } brace-temp
brace-temp -> statement
brace-temp -> }
brace-temp -> @
labeled-statement -> ID labeled-statement-temp
labeled-statement-temp -> calculation expression-statement semicolon
labeled-statement-temp -> ++ semicolon 
labeled-statement-temp -> -- semicolon 
calculation -> =
calculation -> +=
calculation -> -=
calculation -> *=
calculation -> /=
operation -> +
operation -> -
operation -> *
operation -> /
operation -> %
expression-statement -> Number exp-st
expression-statement -> ID exp-st
exp-st -> @
exp-st -> operation expression-statement
initialize-statement -> type ID initialize-statement-temp
initialize-statement-temp -> semicolon
initialize-statement-temp -> = expression-statement semicolon
type -> int
type -> float
type -> char
type -> double
compound-statement -> { statement 
selection-statement -> if ( condition ) statement
condition -> expression-statement condition-temp
condition-temp -> comparison expression-statement
condition-temp -> @
comparison -> ==
comparison -> >=
comparison -> <= 
comparison -> !=
comparison -> >
comparison -> <
iteration-statement -> while ( condition ) statement
iteration-statement -> for ( for-init-statement ; condition ; for-process ) statement
for-init-statement -> type ID = expression-statement
for-init-statement -> ID
for-process -> ID steps
steps -> ++
steps -> --
steps -> calculation var
var -> ID
var -> Number
jump-statement -> break semicolon 
jump-statement -> continue semicolon 
jump-statement ->  return expression-statement semicolon 